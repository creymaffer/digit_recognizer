import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# loading train and test data

train_data = pd.read_csv('/kaggle/input/digit-recognizer/train.csv')
test_data = pd.read_csv('/kaggle/input/digit-recognizer/test.csv')

# Splitting training data into inputs and output

train_y = train_data['label']
del train_data['label']

# normalizing the data

train_data.to_numpy()
train_data = train_data/255

test_data.to_numpy()
test_data = test_data/255

import tensorflow as tf

# converting the output to an array of 1's amd 0's.

train_y = tf.keras.utils.to_categorical(train_y,10)

# Creating a Sequential model with one hidden layer of 140 neurons

model = tf.keras.models.Sequential([
    tf.keras.layers.Dense(units = 140, activation = 'relu', input_shape = [784]),
    tf.keras.layers.Dense(units = 10, activation = 'softmax')
])

# Selecting the appropriate loss function and optimizer.

model.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['accuracy'])

model.fit(train_data,train_y,epochs = 1)

predictions = model.predict(test_data)

# Taking the thresholad as 0.5 predicting the the output obtained

answer = np.round(predictions)
print(answer)

test_y = np.argmax(answer,axis = 1)

# Converting the output into a csv file.

sample = pd.read_csv('/kaggle/input/digit-recognizer/sample_submission.csv')
submit = pd.DataFrame()
submit['ImageId'] = sample['ImageId']
submit['label'] = test_y

submit.to_csv('Submission.csv', index=False)
